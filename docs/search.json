[{"path":"index.html","id":"acknowledgement","chapter":"1 Acknowledgement","heading":"1 Acknowledgement","text":"compiling notes tips R programming everywhere. notes coming Data Science Specialization Course Courseara.","code":""},{"path":"r-programming.html","id":"r-programming","chapter":"2 R Programming","heading":"2 R Programming","text":"R functional programming language. popular among academia Data Sciencetists.","code":""},{"path":"r-programming.html","id":"general-information","chapter":"2 R Programming","heading":"2.1 General Information","text":"Cleaning environmentInstalling packageBrowsing help packagesdirectory creation: testdir/deneme3double colonThere may multiple functions name multiple packages. double colon operator allows specify specific function want:","code":"rm(list = ls())install.packages(\"ggplot2\")  # install\ndetach(ggplot2, unload = TRUE)  # removing the library browseVignettes(\"ggplot2\")\nwd <- getwd()\nwd## [1] \"/Users/d842a922/Desktop/R/_my_R_book\"\n# listing environment objects\nls()## [1] \"wd\"\n# listing files in the working directory\nfiles <- list.files()\nhead(files)## [1] \"_book\"           \"_bookdown_files\" \"_bookdown.yml\"   \"_build.sh\"      \n## [5] \"_deploy.sh\"      \"_my_R_book\"\n# listing files in the working directory\nfiles2 <- dir()\nhead(files2)## [1] \"_book\"           \"_bookdown_files\" \"_bookdown.yml\"   \"_build.sh\"      \n## [5] \"_deploy.sh\"      \"_my_R_book\"\ndir( pattern = \"^L\", full.names = F, ignore.case = T )\nold.dir <- getwd()\n\n# creating a folder in the directory\ndir.create(\"testdir\")\nsetwd(\"testdir\")\n#create a file\nfile.create(\"testdir/mytest.R\")\nfile.exists(\"testdir/mytest.R\")\nfile.info(\"testdir/mytest.R\")\n# to list files in path\nmyfiles <- list.files(path=\"testdir\", pattern = \"[2]\")\nhead(myfiles)\n#rename filename from to\nfile.rename(\"testdir/mytest.R\", \"testdir/mytest4.R\")\n\nlist.files(path=\"testdir\", pattern = \"[4]\")\n# interactive\n file1 <- file.choose()\n# copy file from to\nfile.copy(\"testdir/mytest2.R\", \"testdir/mytest3.R\")\nmyfiles\nclass(myfiles)   # character vector\nmyfiles[1]\nsetwd(\"testdir\")\n\nfile.copy(myfiles[1], \"deneme2.xlsx\")\n# assign a name to a file path (exist or not)\npath1 <- file.path(\"mytest3.R\")\n\npath1\ndir.create(file.path(\"testdir\", \"deneme3\"), recursive = TRUE )\n# assign a name to a folder path (olmak zorunda degiller)\nabc <- file.path(\"testdir\", \"deneme\")\nabc\ndplyr::filter()\nstr(file.path)\nargs((file.path))\n# then you can use variable names directly \n\nattach(mtcars)"},{"path":"create-sequence-of-numbers.html","id":"create-sequence-of-numbers","chapter":"3 Create sequence of numbers","heading":"3 Create sequence of numbers","text":"","code":"\na <- seq(from = 5, to = 14, by = 2)\na## [1]  5  7  9 11 13\n# generates integer sequence of length(along.with)\nseq(along.with = 1:12)##  [1]  1  2  3  4  5  6  7  8  9 10 11 12\nseq_along(1:15)##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nseq(length.out = 4)## [1] 1 2 3 4\nseq_len(10)##  [1]  1  2  3  4  5  6  7  8  9 10\na = seq(10, 20)\nb = seq(10, 30, by =2)"},{"path":"create-sequence-of-numbers.html","id":"in","chapter":"3 Create sequence of numbers","heading":"3.0.1 – %in%","text":"creates logical vector, testing element vector “”\never matches element vector “b”","code":"\nc <- a %in% b\nc##  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE"},{"path":"create-sequence-of-numbers.html","id":"which","chapter":"3 Create sequence of numbers","heading":"3.0.2 which()","text":"(x, arr.ind = FALSE, useNames = TRUE)input logical vector returns location index true values","code":"\nwhich(c)## [1]  1  3  5  7  9 11\nd <- LETTERS[1:10]\nd##  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\ne <- LETTERS[5:10]\ne## [1] \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nd %in% e##  [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nwhich(d %in% e)   ## location of TRUE values of vector d (matches vector e)## [1]  5  6  7  8  9 10\ng <- c(\"c\", \"d\", \"e\", \"k\", \"l\", \"m\")\nh <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"d\")\ni <- g %in% h\ni## [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE\nwhich(g == h)## integer(0)\n# subsetting property\n\ng[g %in% h]## [1] \"c\" \"d\" \"e\"\nwhich( (1:12) %% 2 == 0, arr.ind = F)   ## location in the array (1:12)## [1]  2  4  6  8 10 12"},{"path":"create-sequence-of-numbers.html","id":"where-is-the-min-max-first-truefalse","chapter":"3 Create sequence of numbers","heading":"3.0.3 Where is the min, max, first true/false?","text":".min()\n.max()match(, b)match: integer vector giving position table first match match, otherwise nomatch.min((x == ))dataframesubsettingdropping columnsselecting columnscreating custom operator","code":"\na = c(2, 4, 1, 7, 9, 1, 3, 5, 9, NA, \"4\")\na##  [1] \"2\" \"4\" \"1\" \"7\" \"9\" \"1\" \"3\" \"5\" \"9\" NA  \"4\"\nwhich.min(a > 4)## [1] 1\nwhich.max(a)## [1] 5\na[which.max(a)]## [1] \"9\"\na = 1:15\nb = seq(1, 20, by=3)\n\nmatch(a, b)  ## returns location of true values of vector a##  [1]  1 NA NA  2 NA NA  3 NA NA  4 NA NA  5 NA NA\na %in% b##  [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE\n## [13]  TRUE FALSE FALSE\ndf <- cars\nhead(df)##   speed dist\n## 1     4    2\n## 2     4   10\n## 3     7    4\n## 4     7   22\n## 5     8   16\n## 6     9   10\n# test if value 5 in speed column\n5 %in% df$speed## [1] FALSE\n# create a dataframe\ndf2 <- data.frame(Type = c(\"fruit\", \"fruit\",\"fruit\", \"veggie\",\"veggie\"),\n                  Name = c(\"red apple\", \"green apple\", \"red apple\", \"green apple\" ,\"red apple\"), Color = c(NA, \"red\", \"blue\", \"yellow\", \"red\"))\n\ndf2##     Type        Name  Color\n## 1  fruit   red apple   <NA>\n## 2  fruit green apple    red\n## 3  fruit   red apple   blue\n## 4 veggie green apple yellow\n## 5 veggie   red apple    red\ndf2 <- within(df2, \n              { newcol = \"No\"\n              newcol[Type %in% c(\"fruit\")] = \"No\"\n              newcol[Name %in% c( \"green apple\")] = \"Yes\"\n})\n\nhead(df2, 3)##    Type        Name Color newcol\n## 1 fruit   red apple  <NA>     No\n## 2 fruit green apple   red    Yes\n## 3 fruit   red apple  blue     No\nlibrary(dplyr)## \n## Attaching package: 'dplyr'## The following objects are masked from 'package:stats':\n## \n##     filter, lag## The following objects are masked from 'package:base':\n## \n##     intersect, setdiff, setequal, union\ndf3 <- c(\"home\", \"veggie\", \"fruit\")\n\ndf2 %>%\n    filter(df2$Type %in% df3)##     Type        Name  Color newcol\n## 1  fruit   red apple   <NA>     No\n## 2  fruit green apple    red    Yes\n## 3  fruit   red apple   blue     No\n## 4 veggie green apple yellow    Yes\n## 5 veggie   red apple    red   <NA>\ndf2[, !(colnames(df2) %in% c(\"Name\", \"Color\")) ]##     Type newcol\n## 1  fruit     No\n## 2  fruit    Yes\n## 3  fruit     No\n## 4 veggie    Yes\n## 5 veggie   <NA>\ndf2[, (colnames(df2) %in% c(\"Name\", \"Color\")) ]##          Name  Color\n## 1   red apple   <NA>\n## 2 green apple    red\n## 3   red apple   blue\n## 4 green apple yellow\n## 5   red apple    red\n`%notin%` <- Negate(`%in%`)\n\nnumbs <- rep(seq(3), 4)\nnumbs##  [1] 1 2 3 1 2 3 1 2 3 1 2 3\n4 %notin% numbs## [1] TRUE"},{"path":"logic-statements.html","id":"logic-statements","chapter":"4 Logic statements","heading":"4 Logic statements","text":"TRUE vs FALSEequivalent statement ","code":"\nTRUE == TRUE## [1] TRUE\n(FALSE == TRUE) == FALSE## [1] TRUE\n6==7## [1] FALSE\n6<=6## [1] TRUE\n4 != 5## [1] TRUE\n!(5 == 71)## [1] TRUE\nTRUE & TRUE## [1] TRUE\nFALSE & FALSE## [1] FALSE\nTRUE & c(TRUE, FALSE, FALSE)## [1]  TRUE FALSE FALSE\nc(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)## [1]  TRUE FALSE FALSE"},{"path":"be-careful.html","id":"be-careful","chapter":"5 be careful","heading":"5 be careful","text":"case, left operand evaluated first member\nright operand (vector). rest elements \nvector aren’t evaluated expression.xor() function stands exclusive . one argument evaluates TRUE one argument evaluates FALSE, function return TRUE, otherwise return FALSE.() function takes logical vector argument returns indices vector TRUE.() function return TRUE one elements logical vector TRUE.() function return TRUE every element logical vector TRUE.","code":"\nTRUE && c(TRUE, FALSE, FALSE)## [1] TRUE\nTRUE | FALSE## [1] TRUE\nTRUE | c(TRUE, FALSE, FALSE)## [1] TRUE TRUE TRUE\nTRUE || c(TRUE, FALSE, FALSE)## [1] TRUE\nFALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5## [1] FALSE\n!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79## [1] TRUE\nTRUE && FALSE || 9 >= 4 && 3 < 6## [1] TRUE\n99.99 > 100 || 45 < 7.3 || 4 != 4.0## [1] FALSE\nisTRUE(6>4)## [1] TRUE\nidentical('twins', 'twins')## [1] TRUE\nxor(5 == 6, !FALSE)## [1] TRUE\nxor(T, T)## [1] FALSE\nxor(F, F)## [1] FALSE\nxor(identical(xor, 'xor'), 7 == 7.0)## [1] TRUE\nxor(4 >= 9, 8 != 8.0)## [1] FALSE\nints <- sample(10)\nints > 5##  [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE\nwhich(c(TRUE, FALSE, TRUE))## [1] 1 3\nx <- ints>7\n\nwhich(x)## [1] 2 6 8\nany(ints<0)## [1] FALSE\nall(ints>0)## [1] TRUE\nany(ints == 10)## [1] TRUE\nall(c(TRUE, FALSE, TRUE))## [1] FALSE"}]
